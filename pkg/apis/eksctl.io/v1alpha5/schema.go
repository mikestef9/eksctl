// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (32.206kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x6f\x1b\x37\xb6\x7f\xcf\x5f\x41\xb8\x05\xee\xbd\x80\x6c\xdd\xfb\x70\x77\x81\xa0\x5b\x40\xb6\x53\x47\x9b\xd8\x16\xac\x6c\x8a\xed\xc7\x03\x35\x73\x24\xb1\xe6\x90\x53\x92\x23\x5b\x69\xf2\xbf\x2f\x38\x5f\x9a\x0f\x72\x34\x1c\x51\x5e\xa5\xd8\xb7\xd6\x1a\x1e\x92\xe7\xfc\xce\x27\x0f\x99\x3f\x5e\x21\x74\xf6\xad\x80\xe5\xd9\x6b\x74\xf6\xcd\x38\x84\x25\x61\x44\x11\xce\xe4\xf8\x8a\x26\x52\x81\xb8\xe2\x6c\x49\x56\x67\x23\xfd\xa1\xda\xc6\xa0\x3f\xe4\x8b\xdf\x20\x50\xd9\xdf\xbe\x95\xc1\x1a\x22\xac\xff\xbc\x56\x2a\x7e\x3d\x1e\xff\x26\x39\x3b\xcf\xfe\x7a\xce\xc5\x6a\x1c\x0a\xbc\x54\xe7\xff\xfb\xd7\x71\xf6\xb7\x6f\xb2\x71\x95\xa9\xce\x5e\x23\xbd\x0e\x84\xce\x8a\x39\x29\x4f\xc2\x1f\xb1\x0a\xd6\xe5\x4f\x08\x9d\xc5\x82\xc7\x20\x14\x01\x59\xf9\x2b\x42\x67\x41\x36\xe8\x3d\x5f\xad\x08\x5b\xd5\x7e\xdb\xbb\xb9\x72\xa2\x62\x74\x39\xf4\x4b\xfe\x5f\x5f\x46\xbb\xf9\x61\x09\x42\x40\x78\x2f\x42\x10\x67\xaf\xd1\xcf\xd6\x35\xe4\x3f\xfc\x5a\x8e\xc5\x61\x98\xce\x8c\xe9\xac\xba\x8b\x25\xa6\x12\xca\x8f\x42\x90\x81\x20\xb1\xfe\x4e\xaf\x38\xe0\x4c\x61\xc2\x24\x0a\x52\x11\xa0\x18\x0b\x1c\x81\x02\x21\x91\x00\x8a\x15\x84\x48\x71\x54\xe1\x55\x49\xe8\xf9\x9c\x30\x05\x94\x92\xdf\xce\xd7\x2a\xa2\xe7\x87\x12\x7e\x55\x61\x44\x5b\x46\x6d\xc6\x5b\x45\x05\x0c\x2f\x28\x7c\xd8\xc6\x8d\x1f\x10\x3a\x23\x0a\xa2\xe6\x1f\x2b\x90\x93\x4a\xe8\x39\x46\xf5\x5f\x43\x58\xe2\x84\x2a\xfd\xc1\x59\xe5\x97\x2f\xd5\xcf\x4a\x12\x58\x08\xbc\x1d\x2a\xe0\xea\xca\x7d\x4a\x17\x44\xb7\x14\x72\x60\x21\x9a\x33\xd9\x51\xc6\xae\xe4\x8d\x92\xce\x2c\x40\x45\xbc\x02\x7e\x4f\x88\x80\xb0\xce\xa2\x08\x14\x0e\xb1\xc2\x6d\xfe\xd8\xe0\x80\x63\xf2\x11\x84\xcc\x96\xfc\x87\x49\x66\x06\xb1\xd7\x84\x5e\xfb\x01\x9e\x71\x14\xd3\x74\x92\x9f\xeb\x38\x81\x47\x19\x28\x7a\x41\xf8\x78\xf3\x7f\x98\xc6\x6b\xfc\xff\x55\xb8\xfc\xfa\xca\x00\x9c\x33\xbc\xc1\x84\xe2\x05\xa1\x44\x6d\x7f\xe2\xec\x14\x10\x3b\xaa\x1a\x1c\x83\x89\x44\x0e\x06\xcf\x4c\x76\x89\xc5\x0a\x2b\x98\x09\xbe\x24\xb4\xf7\x96\xcd\x53\xfe\x50\xa3\x75\xd0\x6e\x57\x44\xf5\xdb\xe6\x0d\x51\x66\x0a\x04\x47\x4e\x8c\x9a\x4e\x6e\xcd\x84\x1e\x09\x0b\x8f\x8c\xd6\xba\xde\xed\x05\x6a\x84\x19\x5e\x41\x78\xc7\x43\xb8\x11\x3c\x89\x0f\x93\xda\x6d\x83\xda\x41\x72\x2b\x4d\x82\x0b\xeb\x6f\x61\x67\x43\xea\xe4\x98\x9f\x2d\xfa\xd9\x9b\x84\x40\x80\x92\x6f\x58\x20\xb6\x85\xd9\xed\xb1\xc9\x79\x6b\x98\x99\xba\xc2\x2a\x69\x6d\xb3\x93\x6f\xf3\x6c\x88\x91\xdc\x26\x0e\x9c\x68\x7d\x9c\x5d\x0d\xf5\x94\xa9\x82\x8c\x8c\x46\xde\x84\x8c\x86\x8e\x36\xd6\x6c\x16\x7e\x27\xf8\x3b\xac\x59\xa7\x75\x37\x1b\xd7\x4e\x81\xb7\xe5\xd5\xb0\x59\x5e\x22\x05\x8c\x24\xd1\x96\x22\xf7\xe4\x23\xed\xb7\x17\x80\x04\xc4\x14\x07\x10\xa2\x27\xa2\xd6\x28\x97\x1b\x9a\xcc\xa6\xbd\x63\x04\x67\xc2\xa6\xe8\xe0\x0d\x0b\x63\x4e\x98\x92\x7d\xe2\xbf\x58\x90\x0d\x56\x30\x09\x02\x90\x2d\x70\x17\x3a\xb7\xe0\x9c\x02\xb6\xe8\x45\x9c\x2c\x28\x09\x5c\x09\x38\x01\xb8\xbe\x48\xdb\xdc\x5e\x44\xbb\xe6\x34\x94\x65\x10\x86\x63\x82\x24\x88\x0d\x08\x04\x39\x57\x11\x4e\x67\x43\x84\x2d\xb9\x88\x70\x0d\x75\xfb\xc4\x3b\x88\xb8\x49\xc4\xda\x17\xf6\x10\x6e\xa1\x6d\x3c\x7c\xf3\x0c\x41\xa2\xc9\x3d\x70\x0a\x93\x87\xbb\x3d\xfe\xb2\x33\x12\x69\x50\x9b\x81\x88\x88\xd4\xd6\x44\x5e\xf2\x84\x85\x58\x6c\x87\x50\xd7\x9c\x20\x81\x96\x31\x4f\xea\xd8\x45\xce\xee\x64\xc7\xa5\x79\x8d\xea\x81\xde\x25\x25\x75\x00\x03\x2b\x14\x3c\x31\x4d\xdb\x83\xfb\xe9\xf5\xd5\x91\xf4\xae\xb1\xe5\xfe\x5b\xd9\x8f\x9a\x06\x3d\x07\x6c\x99\xb6\xdf\x81\x23\x8f\x56\x01\x53\x8a\xa6\x93\x5b\x84\x95\x12\x64\x91\x28\x90\x88\x2f\x11\x2e\x14\xda\xd1\x0c\xec\xa3\x66\xd1\xfb\x06\xa2\x7b\x58\x01\xcc\x18\x57\xb8\x5e\xd7\xe9\xe6\xc5\xf1\xf2\xa7\x4a\x9d\xca\x44\xe0\x8f\x2f\x66\x9c\x63\xa5\x70\xb0\x9e\x71\x4a\x82\x96\x9e\x98\x4d\xc0\x94\x51\xc2\xe0\x9a\x07\x49\x04\xcc\x92\x81\x54\xa9\x4e\x1e\xee\x4e\x2b\x9d\xa4\x78\x01\xf4\xab\x15\x18\xc3\x11\x0c\xcd\xc9\xac\x04\x65\x8c\x03\xbf\x54\x63\x67\x33\xec\x46\x7f\x40\xce\xd0\x52\xf1\xae\x24\x42\xe1\xd5\xd7\x05\x11\x27\xf7\x93\x82\xc8\x88\x81\xb6\x9e\x8c\xcc\xf6\xae\x4b\xdb\x6d\xf6\x65\x0f\x3e\x3a\x53\x8c\x54\x20\x3e\x5d\x0e\x43\x04\x47\xb9\x4f\xc3\x19\x20\x50\x91\xa9\x21\xcc\xc2\x3c\x53\x48\xc4\x90\x48\xd4\x95\x7a\x2f\x97\x34\x6f\x62\xde\xea\x98\x84\x63\x28\xe5\x04\x9e\x82\xb8\x47\x61\x64\xe2\xd6\x5e\xba\xc5\x35\x47\xc6\x77\x51\x32\x31\x39\x2d\xc0\xec\x2d\xf7\x36\xf5\x45\xc0\xaa\x52\xcd\xd8\x5f\xfc\xf5\x6e\xb4\xf3\x05\xf8\x24\xf9\xd5\x59\xbc\x6a\xf9\xe4\xb0\xca\xba\x27\x2b\x9a\x0b\xc5\xb0\xae\xa3\xd8\xb1\xa7\x35\x56\x88\x84\xc0\x14\x59\x12\x90\x03\xc2\x65\x3b\x05\x93\xaa\xdc\x4d\x3e\xf4\xb1\x3d\x3a\xdb\x78\xc2\xfd\x93\x2e\x27\x96\x17\xc4\x3d\xda\x9e\xbb\xc9\x07\x94\x93\xad\x1b\x65\xc4\xe3\xba\xab\xeb\x67\x81\xf6\xd3\x33\x31\xb7\xbf\x6d\xc7\xc2\xaf\xde\x07\x7a\x92\x25\x09\xb0\x82\x49\xa2\xd6\x5c\x10\xb5\xbd\x36\xd4\xb1\xfb\xc5\xec\x87\x04\xe6\x45\xad\xc6\x77\xa0\x18\x3c\xde\x79\xb1\xbf\x4e\x48\x2d\x37\xd3\x87\xd5\xa3\xba\x78\x8d\xcb\xf7\x06\x79\x24\x00\x87\xe7\x9c\xd1\xad\x97\x7c\xbb\x07\x39\x23\xe0\x93\x05\x03\xa7\x4a\xea\x30\xe7\x64\x39\x16\x01\xf5\xc4\xc5\xe3\xd1\x1c\x52\x56\x3e\x3d\xf9\x15\x3b\x21\xba\x10\x43\x7b\x9b\x1e\xad\x71\x3e\x49\x1a\x22\x67\xd4\x91\xcc\x91\xe2\x66\x86\x3b\x08\x99\xe0\xf8\x71\x76\xd5\xcb\xf8\x26\x8a\x4f\x28\xe5\x5a\x85\xa7\xb3\xcd\x5f\x06\xd5\xf5\x03\x12\x8a\x7e\x99\xeb\x8a\xa8\x75\xb2\xb8\x08\x78\xf4\xf9\x09\xf0\x06\x34\x02\xe4\xe7\xec\x84\xff\x73\xfc\xb8\xfa\x9c\x28\x42\xe5\x67\x12\x33\x50\x17\xd3\xd9\x1d\x58\xea\x31\x81\xfd\xfc\xa2\x63\xf6\xd6\xa9\x87\xd9\x6a\x3f\x2b\x81\xaf\xa6\xd7\x0f\x87\x55\x96\x0f\xd9\x6a\xb7\xaf\x69\x68\x42\x0d\x2b\x4b\x2e\xd0\x0e\xac\x48\x6f\x03\x61\x29\x79\x40\xb2\x34\x77\x84\xe0\x62\x75\x81\x14\x47\x89\x84\xec\x90\x48\x42\x8c\x85\x46\x56\xfa\xb1\x26\x50\x40\x2d\xc7\x17\xd2\x34\xd9\x16\xe1\xf0\x7c\xcd\xdb\xf0\xed\x03\xe1\x17\x5c\x96\x51\xa6\x64\xf0\xb1\xbf\x91\x1c\xc3\x3d\x5b\x1a\x2a\x91\x66\x87\x59\xcd\x4e\xa5\x5c\x20\xf7\x32\x85\x45\x09\x41\xa2\x5d\x7a\x76\xde\xee\x35\x88\x59\x63\x91\x1d\xfc\xce\x87\xcf\xd1\x42\x58\x2c\xe0\x3c\xe5\x3e\x84\x28\x9b\x01\x31\x1e\x02\x9a\xdf\x38\x83\xb5\x2f\xa9\xfd\x3b\x6d\x85\x05\xfb\xe1\x32\x37\x69\x58\x63\x91\x85\x12\x60\x01\x08\x88\x5a\x83\x28\xbc\x42\x45\x53\xf4\x4e\xda\x0a\xa5\x37\xb2\x4a\xcf\xdb\x91\x5a\x83\x84\x94\xc6\x23\x6c\x21\x44\x8b\x2d\x9a\xfc\x94\x0e\x0b\x38\xdb\x00\x23\xc0\x6a\x35\xb4\xfd\xcc\x7b\xc9\x75\x0d\xf4\xfb\xa4\xd6\xe2\x90\x3a\x2f\x2b\xe8\x0d\x92\x34\xbb\x8a\x1e\xe0\x1e\x75\xb8\xdd\x86\x71\xe9\x72\x75\x9d\xe6\xc3\x63\xe4\xb2\xa2\x7c\x81\x69\x6e\x57\xd3\xb0\x03\x53\x8a\x82\x35\xa1\x45\x00\x32\xae\x5b\x64\xc7\x80\xc6\x9d\x7e\x2d\xce\x69\x74\xa8\xf5\x2b\x79\xb5\xd8\xe3\xaf\xc0\x55\xdb\x21\x5f\x6a\x08\xa3\x7c\x8d\x28\xce\x16\x79\xe1\xa4\x49\xbd\x68\xec\x3f\xb7\x70\x3e\xd1\xef\xda\xd7\x74\x72\x8b\x04\xa7\xf0\x5f\x12\x4d\x1e\xee\x0a\x7f\xad\x38\x12\x09\x43\x31\x0f\x25\xe2\x4c\xf1\x62\xcd\x6e\xfb\x3d\x88\xf6\x7e\x3b\x0c\x14\x02\xc5\x85\xcf\xb6\xc8\x79\x4e\xd3\x47\xe0\x96\x39\x9b\x54\xe2\x22\xa1\x20\xf5\xc6\xb3\x35\x23\x1d\x39\x52\x8e\xd3\x9e\x5f\x19\xac\x21\x4c\x28\x1c\xc0\xe7\xc3\x66\x72\x71\x72\x2f\x15\xbc\x74\xf1\xf5\x69\x4d\x82\x75\xa9\x44\x72\xcd\x13\x1a\x16\xc0\x0a\x39\x62\x59\x16\x8a\xd2\xae\xa9\x08\x98\x42\xb9\xda\x65\x1c\x81\xb0\xe4\xc9\x05\x9a\x2e\x11\xe3\x2c\xd5\xc4\x0d\x09\x21\x1c\xa5\x06\xab\x70\x78\xda\x39\xe9\x81\x45\xcf\xce\x13\xa1\x14\x2d\x40\xcf\x15\xba\x09\xe8\x44\x96\x6c\x94\xf4\x57\x57\x54\x77\x8a\x0c\x9a\x05\x70\x93\xf1\x34\xda\x94\xee\x30\xc1\x5f\x89\x3c\xd3\x5d\x99\x8b\x5b\x29\xc2\x56\x32\x15\x57\x4d\x63\x4b\x35\x36\x1b\x89\x7e\x06\x62\xe0\x24\x1d\x3e\xba\x34\x97\xbd\x7c\x75\x76\x7c\xdb\xdb\x61\x9f\x74\x13\x44\x8d\xbd\xef\x92\x05\x08\x06\x0a\x24\x4a\x17\x8d\x4a\x18\x55\x7c\x5e\xc3\x20\xbb\x19\x10\x0f\x33\xf4\x6c\xdc\x18\xd0\x67\x61\x5b\x69\x49\x0e\x2d\x05\x8f\x50\x66\x04\x3d\x72\x62\x18\x7d\x4f\xa7\x6a\xb6\x5e\x04\xaf\x46\xe1\x80\xb8\xa1\xaf\x49\x18\x1a\x30\x14\x06\xe1\x86\xf4\xea\x43\x5b\x70\xae\xa4\x12\x38\x6e\x47\xf7\xc8\x1e\x9c\xb5\x2e\xab\x54\xd1\xaa\x27\xc2\x75\xe3\xd3\x41\xea\xbe\xf8\xda\x48\x4b\x40\xcc\xfb\xd1\x79\xd0\x5f\x0e\xc4\x4d\x3a\x8b\x69\x07\xa3\x0e\x46\x79\x01\x54\x9e\x84\xa7\xe9\x98\xe9\xc0\xaf\x7a\x09\x2d\xbd\x5b\x47\xd8\x0a\xdd\x10\x75\x1f\xeb\x18\x7d\x77\x4e\x92\x26\x75\x94\xb0\x47\xfd\x3b\x51\xfa\x73\xac\xbf\x43\x7a\x6b\x92\x28\x2e\xb6\xfd\x21\xf8\xa2\x8b\xaa\x81\xb6\xd1\x20\x58\xc1\xaf\xcd\xbd\xec\x04\x6c\xf1\x0b\xb6\x16\x9e\x2d\xc2\x62\x41\x94\xc0\x62\x8b\xfe\x3e\xbf\xbf\x1b\xff\x73\x72\xfb\x1e\x85\xf9\xd4\x72\x84\x64\x12\xac\x11\x96\x28\xad\x3c\x18\xae\x07\x72\x91\x76\x8a\xc6\x9c\x92\x80\x80\xeb\x19\xc3\x31\x17\x60\xf0\x28\x05\x83\x5b\xd7\x96\x3c\x27\xf3\x38\x22\x3f\xe0\x88\x50\xbf\x1d\x7b\xa7\x7d\xc7\x30\x04\xa9\xd9\x76\x85\x63\x1c\x10\x65\xdd\xb9\x06\xc5\x0a\x2c\x76\xae\xf7\xbd\xbb\x52\x72\xd6\x9b\x77\x84\x49\x85\x59\x90\x5e\xc2\xf5\x2a\x85\x93\x8e\xfb\xf6\xc6\x50\x11\x7e\x9e\x93\x4f\x56\x8e\x74\x4a\x27\x22\x6c\xf0\x58\xef\xfd\x5b\x79\xa5\x2e\x3f\xd4\x35\x5c\xe5\x6f\x1e\x24\xda\xc8\xa7\x8e\xc9\x52\x65\x90\x3d\xef\xcb\x96\x70\x9c\xcf\xdf\xfe\x49\xd2\xd8\xca\xda\x37\x9c\x26\x11\xb8\x89\xde\x39\x60\xad\x15\xab\x4b\xf3\x69\x53\xe8\x0e\xbb\x63\x00\xac\x01\xff\xe6\xed\x75\x1a\xdb\x06\x30\xda\x26\xa1\x13\x9d\x4d\x2c\x34\xac\x9e\xd7\xb8\x1c\x33\xf4\xe6\xdd\xfc\x3c\xbf\xed\xb8\x3b\xe6\x40\x1f\xee\xaf\xef\xd1\x47\x4c\x49\x58\x1e\x8a\xb0\x08\xc7\x31\x84\x68\x49\x20\x73\xc8\x21\x52\x6b\xc1\x9f\x34\x11\x10\x82\xf7\x6f\x65\x39\xce\xec\x75\xbf\x0d\x4a\x90\x40\x5e\x71\xaa\x93\x81\x7a\xbf\xa2\xc5\x71\xaf\x04\x66\x09\xc5\x42\x43\xa3\xb7\xff\xae\x0e\xf2\x69\xb4\xa2\x6c\xfd\xff\x7e\xbf\xed\xa4\x9e\x55\x6e\x18\x36\xe3\x05\xba\x69\xb5\x67\xb1\xcd\x4a\x40\x01\x4e\x63\xe9\xe2\xa2\xa9\x04\x40\x3f\xa7\xb7\x6c\xcb\x9b\x87\x3a\x40\x94\xbf\xfe\xf7\x5a\xa9\x58\xbe\x1e\x8f\xf5\xff\x5d\xe0\x27\x79\x81\x23\xfc\x89\xb3\x8b\x80\x47\xe3\xc9\x8f\xf3\xf4\xfd\x82\x1f\x8a\x31\x63\x1d\xad\x4b\x35\xfe\x87\x04\x71\x93\x90\x10\xc6\xf8\x49\x9e\xef\x20\x70\x8e\xe5\x79\xbe\xa7\xa0\x04\xd8\x85\x46\xfa\xff\xf4\xd6\x81\x7d\xdb\xf8\x0e\xa3\xb5\x80\xe5\xdf\x7e\x39\x7b\xa1\xa5\xff\x72\xf6\xbd\x81\x73\xdf\x8d\xf1\xf7\x75\xcd\x2a\x9a\xa3\x7a\xe4\xca\x2f\xdf\x7c\xe3\xa3\x99\xc2\x09\xf1\x86\x03\x5b\x2f\x28\xcf\x92\x9e\xe9\x75\x6a\xe8\xae\xa6\xd7\x0f\x8e\xe9\x52\x75\x64\x5d\x7c\x47\xcc\x64\xfc\xe6\x30\xc7\xc9\x8c\xe4\xaa\xcb\x35\xa0\x0e\x23\x6b\x79\xd7\xa2\x45\xed\x90\xd4\xe8\xb4\x13\xb7\x05\x57\x8a\x82\xe0\xc1\x23\xf4\x6c\x32\x2a\xd1\x76\x59\x1d\x6a\x24\x1e\x50\x2c\x25\x09\xde\x73\x1c\x5e\x62\xaa\xe3\x37\x71\x87\xa3\x13\xe3\x40\x5e\xa8\xb9\xbe\x9b\x7b\x45\xa5\x8f\x8c\x18\x16\xf2\x3e\x56\x24\x22\x9f\xc0\x6a\x04\x3b\x5b\x25\x8f\x90\x52\xfb\xe9\x05\x37\x10\x9e\x09\x58\x92\xe7\xa3\x90\xf6\x5e\x06\x28\x08\xcb\x6b\x22\xb3\x9e\xed\xde\x8f\xba\xec\x38\x6d\xa4\x61\x9c\xee\x31\x59\x00\x05\xf5\x26\xed\xff\x69\x3e\xb1\xd5\x31\x57\x9f\xbb\xc6\x5f\x7d\x45\x63\xc6\x43\x39\x03\xa1\xf9\x3a\xac\xb0\xf1\x67\x29\x8a\xf0\x0d\x08\x41\x42\xb8\x2c\xaa\xf4\x57\x3c\x8a\xf0\xde\x27\xa8\x8c\xb4\x62\xd1\x22\x73\x5a\x56\xfb\x45\x2a\x40\xd5\x7e\xba\x9e\x3d\x95\xbb\x62\xd0\x8d\xa5\x39\xf8\x3f\x75\xa5\x7c\xed\xa6\x4e\xfa\xaf\x67\xf5\x62\x05\x2a\x95\xce\xc9\x3d\xd0\x90\x95\xb4\xf2\xb7\xa7\x06\x06\x0e\x19\x8d\xe9\xfd\xcc\x1a\x14\x75\xda\xb6\x6c\xf8\xbb\x48\xbe\x83\xed\xf4\x7a\x88\x01\xca\x28\xf4\x08\x36\x3a\x46\x0f\x36\xcd\xd9\xf0\x1e\x51\xc3\x6e\xf4\xab\x06\x15\xd7\x92\xe7\xe0\x0a\xa8\x39\x14\xb1\xc7\x57\xb6\x90\xae\x6f\xf5\xb3\x59\xbf\xec\x2c\x76\x36\x2c\xa8\xcf\xc2\xad\x31\xeb\xb3\xc5\xce\x7b\x0b\xbe\x15\x89\x9b\x41\xd8\xa1\x5f\x76\xdc\x9b\x15\xca\x1e\xbe\x74\x56\x95\x73\x83\xd9\x27\xbd\xea\x30\x54\xf6\x3a\x76\xe3\x49\xbd\x5a\x62\xb8\x2f\x32\xe8\x13\x85\x98\x53\xae\xee\x28\x37\xff\xd1\xd7\x1b\x49\xf5\x93\xfc\xca\x75\x4b\xb5\xc6\x2a\xed\xff\x97\x31\x04\x64\x49\x82\xec\x9c\xbe\xac\x5e\xbb\x1e\x6c\x1f\x34\x57\x3a\x55\xab\xb6\x73\x69\x4e\xd4\xf7\xbc\x9f\x3c\x09\x23\xc2\xae\x8a\x07\x7e\x07\xb9\x82\xa2\x27\xef\xc0\x94\xc3\xc9\x40\x1a\x17\x6f\x5a\x93\x47\x80\xa4\xad\xa9\x35\xa1\x2d\xb9\x40\x55\xb6\xa3\x05\x96\x10\xa2\xdd\x03\x92\xfd\xdb\x49\x0e\x98\xc2\x0c\x87\x9e\x0f\xed\x9d\xf4\x4b\x52\x3b\xcf\x94\x76\x13\x39\xdf\x15\xe8\x99\xa4\x0f\xba\x87\xe0\x40\xfb\x68\x15\x91\x61\xef\xf1\xb9\xcd\xf5\x44\xd4\x7a\x12\x86\x9c\xcd\x8a\x16\x1a\xe7\x7a\x51\x7d\xf8\x40\x8d\xef\x7a\x04\xc9\x80\x93\x0e\x31\x77\x49\xc9\x81\xc9\x9d\x3c\xf2\xec\x97\x4c\xaf\xed\xed\x8a\xfa\xee\xbe\xa7\x9b\x9e\xd5\xa0\xd8\x70\x60\xb7\x2e\x74\x31\x65\x2b\x31\xf4\x81\x56\x1c\xc7\xb7\xd0\xce\x86\x5d\xc6\xce\x04\x6c\x08\x3c\x0d\x23\x91\x28\x3e\x0f\x30\x1d\xe8\x17\x03\x10\x2a\x6b\x25\x1b\x38\xde\xfa\x2c\x7b\xaf\xe1\xb0\x18\xc6\x74\x58\x0e\x1c\xf7\xac\x40\x30\x4c\x3b\xea\xe4\x9d\xe3\x97\xd2\x5a\xdb\xed\x2e\x61\x47\x78\x05\x97\x09\xa1\xe1\x40\x3e\x3f\x3f\xd8\x5f\xd3\x39\xf0\x19\xd2\xda\xda\xcc\xc8\xb2\x70\xd0\x82\x23\x83\x72\xd8\x31\xdf\x00\x43\x83\xd7\x0d\x91\x8f\x8c\x5a\xdb\x64\x93\x19\x9e\xc7\xb0\x76\xda\xd4\x0c\xee\x1b\x35\x13\xb1\xd8\xb5\x3d\xa5\x7a\xcb\x41\x69\x35\xdd\x36\xd8\x7b\x9b\x45\xac\x0f\x3b\xa5\x60\x4b\xa7\x9a\x82\xd8\xaf\x4f\xb0\x24\x5a\xd8\xea\x21\x9c\x5d\x83\xce\xe1\x2e\xb1\x84\x83\x0e\xb4\x0a\x42\x33\x10\x01\x30\x85\x57\x30\x59\xf0\x0d\x1c\x4c\x57\xc6\x5c\xe5\x17\x9c\x09\x67\x73\x25\xb0\x82\xd5\xb0\xd7\x9e\x63\xae\x0a\xc8\xcc\x38\x6f\x9f\x8c\x78\xea\x7a\xab\x03\xc5\x24\xa7\x7d\xfc\x77\x64\x6b\xe7\x1e\xf7\xb3\xd2\xa3\x0d\x30\x67\x41\x7a\x5e\x54\x16\xb3\xbc\x24\x56\x0d\x92\x66\xfb\x30\xbf\xe9\x17\xea\xa4\xf1\xe9\xf4\xfa\xb4\x94\x5a\x47\xa6\xef\x79\x80\xe9\x20\xcf\xa8\x47\xcf\xd3\xd7\x03\x8e\xe4\x1f\x77\x4c\x33\xcf\x6a\xdc\x89\x67\x6f\x33\xbf\xf1\x1a\x5a\x77\x92\xb3\x20\x6c\xfe\xb6\x5f\x30\x4d\xf9\xb0\x40\x36\x7b\xbe\xe0\x1d\x0c\x32\x78\xe5\xe0\xa1\xb5\xf6\x92\xc0\x0c\x2b\x6b\x28\xdb\x69\x72\x79\x22\x82\xfa\xe3\x15\xd3\x53\x38\x6d\x74\x83\x7a\x2a\x3d\x2b\x5b\x8c\xd2\xb2\x4a\x61\x3f\x73\x3c\x2b\x49\xda\xb1\x28\xd7\xc5\xbf\xf2\x50\x37\xa5\x69\x79\xf2\x10\x9d\x71\xa1\x5e\x53\xa1\xfb\xf6\x2d\x3a\x7b\x63\x22\x8f\x22\xa2\x8a\x11\xb7\x98\x91\x25\xc8\xf6\x01\x63\x2f\x85\x4a\x8b\xef\x5e\xcb\x2c\xc7\x79\x25\x5c\x00\x0e\xef\x99\xbd\x9d\xee\x80\xb3\x6f\x6d\x8f\xdf\x02\x6d\xb5\x0f\x79\xf2\x0c\x36\x69\xb5\x84\x60\xe4\xa1\x69\x9d\x26\xb6\x78\xd1\x12\x97\x9b\x80\x1a\xe9\xc5\xc5\xc9\xf2\x0e\xfb\x23\x40\x5c\x7b\xf8\x20\x6b\x74\x87\xc6\x35\x40\x44\x18\x92\x5b\x16\x1c\xe7\x8e\xa2\x9f\x95\xd5\xb4\xd3\xf0\x16\x8e\x4d\x39\x79\xa2\xe2\x44\xf5\x70\x10\xae\xf8\xdf\x10\x3f\x0f\x17\xb7\x2c\xee\x0b\xf7\x1c\xe7\x93\x9a\xf6\x36\x32\xb2\xd1\x37\xb4\x43\x50\x98\xd0\xfc\xee\xea\xef\x09\x09\x1e\xa5\xc2\x42\x15\xef\x00\x95\xd7\x5c\x41\x7f\xd1\x84\x0c\x0e\x4b\x8c\x79\xb8\x6f\x7b\xac\xa5\xd4\xc0\xfb\x50\xbf\x54\x6d\xbf\x1b\x2e\x30\xb3\x57\xe8\x06\x01\x0c\x22\x4c\xfc\x7a\x97\x25\x4d\x9e\xbd\x2b\x57\x8c\xd5\xfa\x04\xa2\xb0\xea\x8a\xb2\x56\x83\xf9\xfc\x6d\xbf\x68\xd3\x6d\xbf\x89\xf0\x2b\x94\x44\xda\x0b\x96\x47\xb2\x22\x7a\x0b\xa3\x16\x76\x5b\x32\x35\x21\xa7\xb9\xf0\x16\x5e\x3b\xe5\xf0\xe2\x8e\xb6\x79\x87\x3e\x73\x69\x3a\xe9\xcf\xee\xe0\x1f\xc7\x89\xee\x9f\xb5\x66\x63\xda\xff\x7e\xe3\xde\xb2\xe3\x23\x6c\x8d\xff\x36\x84\xcd\x3c\xe5\xdf\x1f\xa5\x4b\xc9\xb6\x96\x43\x5f\x12\x6a\x17\x6a\xde\xdd\xce\x11\x94\x5c\x2a\x9e\x8f\x72\xbf\x7c\xe8\x46\xbd\x26\xab\x01\xb7\x95\x2a\xc2\xb4\xe8\x75\xeb\x75\x30\x81\x63\x89\x4a\x0a\x1a\x52\x2b\x50\xd9\x93\xb3\x12\x04\xc1\x94\x7c\x4a\xd7\xdd\x1f\xbe\x0e\x24\x5f\x15\x10\xf8\xf2\xea\xcb\xab\x7f\x05\x00\x00\xff\xff\x61\xeb\x69\xc3\xce\x7d\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x16, 0x62, 0x78, 0x17, 0xd1, 0xe0, 0x7d, 0xa7, 0x8b, 0xc7, 0x54, 0x7d, 0xec, 0x6f, 0x36, 0xa9, 0x24, 0x54, 0xc2, 0xb9, 0xc, 0xf, 0x8d, 0xda, 0xde, 0x95, 0x78, 0x4, 0xa, 0x2, 0x78}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
